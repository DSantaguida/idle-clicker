// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: bank.proto

package bank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankClient is the client API for Bank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankClient interface {
	CreateBank(ctx context.Context, in *BankRequest, opts ...grpc.CallOption) (*CreateBankResponse, error)
	GetBankData(ctx context.Context, in *BankRequest, opts ...grpc.CallOption) (*GetBankDataResponse, error)
	SetBankData(ctx context.Context, in *SetBankDataRequest, opts ...grpc.CallOption) (*SetBankDataResponse, error)
}

type bankClient struct {
	cc grpc.ClientConnInterface
}

func NewBankClient(cc grpc.ClientConnInterface) BankClient {
	return &bankClient{cc}
}

func (c *bankClient) CreateBank(ctx context.Context, in *BankRequest, opts ...grpc.CallOption) (*CreateBankResponse, error) {
	out := new(CreateBankResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/CreateBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) GetBankData(ctx context.Context, in *BankRequest, opts ...grpc.CallOption) (*GetBankDataResponse, error) {
	out := new(GetBankDataResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/GetBankData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) SetBankData(ctx context.Context, in *SetBankDataRequest, opts ...grpc.CallOption) (*SetBankDataResponse, error) {
	out := new(SetBankDataResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/SetBankData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServer is the server API for Bank service.
// All implementations must embed UnimplementedBankServer
// for forward compatibility
type BankServer interface {
	CreateBank(context.Context, *BankRequest) (*CreateBankResponse, error)
	GetBankData(context.Context, *BankRequest) (*GetBankDataResponse, error)
	SetBankData(context.Context, *SetBankDataRequest) (*SetBankDataResponse, error)
	mustEmbedUnimplementedBankServer()
}

// UnimplementedBankServer must be embedded to have forward compatible implementations.
type UnimplementedBankServer struct {
}

func (UnimplementedBankServer) CreateBank(context.Context, *BankRequest) (*CreateBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBank not implemented")
}
func (UnimplementedBankServer) GetBankData(context.Context, *BankRequest) (*GetBankDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankData not implemented")
}
func (UnimplementedBankServer) SetBankData(context.Context, *SetBankDataRequest) (*SetBankDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBankData not implemented")
}
func (UnimplementedBankServer) mustEmbedUnimplementedBankServer() {}

// UnsafeBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServer will
// result in compilation errors.
type UnsafeBankServer interface {
	mustEmbedUnimplementedBankServer()
}

func RegisterBankServer(s grpc.ServiceRegistrar, srv BankServer) {
	s.RegisterService(&Bank_ServiceDesc, srv)
}

func _Bank_CreateBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).CreateBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/CreateBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).CreateBank(ctx, req.(*BankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_GetBankData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).GetBankData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/GetBankData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).GetBankData(ctx, req.(*BankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_SetBankData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBankDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).SetBankData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/SetBankData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).SetBankData(ctx, req.(*SetBankDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bank_ServiceDesc is the grpc.ServiceDesc for Bank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.Bank",
	HandlerType: (*BankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBank",
			Handler:    _Bank_CreateBank_Handler,
		},
		{
			MethodName: "GetBankData",
			Handler:    _Bank_GetBankData_Handler,
		},
		{
			MethodName: "SetBankData",
			Handler:    _Bank_SetBankData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}
